######## Links: ###############################################

# Docs: Javascript
https://developer.mozilla.org/en-US/docs/Web/JavaScript

# Docs: HTML
https://developer.mozilla.org/en-US/docs/Web/HTTP

# Docs: CSS
https://developer.mozilla.org/en-US/docs/Web/CSS

# Docs: Electron.js
https://www.electronjs.org/docs/latest/

# Docs: Node.js
https://nodejs.org/docs/latest/api/



# Docs: Python
https://www.python.org/doc/

# Docs: Flask
https://flask.palletsprojects.com/en/3.0.x/#

# Docs: Python's C-api
https://docs.python.org/3/c-api/init.html

# Docs: Python's sqlite3 library:
https://docs.python.org/3/library/sqlite3.html



# Docs: RabbitMQ
https://www.rabbitmq.com/docs
https://www.rabbitmq.com/tutorials



# Tutorial: Python backend with Javascript frontend
https://tms-dev-blog.com/python-backend-with-javascript-frontend-how-to/

# Tutorial: Building a deployable Python-Electron App
https://medium.com/@abulka/electron-python-4e8c807bfa5e



# Steel Color Palette:
https://www.color-hex.com/color-palette/9879

SIL BLUE:       #10529e
SIL YELLOW:     #f9ab4b
SIL RED:        #ef4e2d





######## Setting up Python backend: ###########################
1)	mkdir backend                               # make a folder for the backend stuff
2)	cd backend                                  # go to it
3)  python -m venv venv                         # create a virtual environment
4)  ./venv/Scripts/activate                     # activate the venv
5)  pip install flask flask-cors                # install flask




######## Setting up Electron frontend: ########################
1)	mkdir frontend                              # make a folder for the frontend stuff
2)	cd frontend                                 # go to it
3)  npm init                                    # initialize the node.js package
4)  npm install --save-dev electron             # install Electron into the node package
5)  add "start": "electron ." to package.json 'script' section
6)  npm install --save-dev @electron-forge/cli  # install the Electron forge, used for deployment





Things I don't fully understand:
    JAVASCRIPT:
        async/await :: I sort of understand them, but not fully
        fetch :: what does this method DO, exactly? What sort of object is it returning? What is the "getReader" method that it is able to call?
        require :: Why does this method return things? It seems to behave very differently from the import/include calls I'm used to seeing.

    PYTHON:
        yield :: I know it creates a "generator". I think I get it--it doesn't RETURN, thus ending a function, but rather it pauses the function's execution until it's called again? I think? I can play with that and test it.
        Queue object :: I understand it pretty fully, but I really just want to look into best practices and think more about how I'm using it here, and decide whether or not it's really the best option. I think it is, since it will block and wait for the next message, but I have to think about when a battery times out. Would help to see how Matt handled it in the SIL II GUI.
        Threads :: Similar to the other two, I just want a better idea of WHEN and HOW to use threads more effectively. I understand threads and multithreading, but when do I want to use it when building an application like this?

    RABBITMQ / PIKA:
        Connection objects :: How many different options are there, and why might I prefer a "BlockingConnection" over some other type?
        Exchange Types :: I know there are four types, and that I'm using fanout. How do the other types behave?

    HTML:
        Content-Security-Policy :: I want to know more about the options before me. I think I've got the options set how I want them, but what if there are other options that I might want? And what does 'self' REALLY mean?
        Meta tags :: Again, what sort of meta tags are available to me and what should I use?
        Div/Span tags :: What are these REALLY for, as opposed to using something like the Label tag?

    NODE / ELECTRON:
        preload.js :: What's good to put into this file? I have a feeling that one of the functions I have in my renderer.js file should actually be in THIS file.